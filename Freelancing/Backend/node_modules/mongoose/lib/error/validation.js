/*!
 * Module requirements
 */

'use strict';

const MongooseError = require('./mongooseError');
const getConstructorName = require('../helpers/getConstructorName');
const util = require('util');
const combinePathErrors = require('../helpers/error/combinePathErrors');

class ValidationError extends MongooseError {
  /**
   * Document Validation Error
   *
   * @api private
   * @param {Document} [instance]
   * @inherits MongooseError
   */
  constructor(instance) {
    let _message;
    // Check if the instance is a model
    if (getConstructorName(instance) === 'model') {
      _message = instance.constructor.modelName + ' validation failed';
    } else {
      _message = 'Validation failed';
    }

    // Call the parent constructor with the generated message
    super(_message);

    // Initialize an empty errors object to store validation errors
    this.errors = {};
    this._message = _message;

    // If instance exists, associate the errors with the instance
    if (instance) {
      instance.$errors = this.errors;
    }
  }

  /**
   * Console.log helper to display error as a string
   */
  toString() {
    return this.name + ': ' + combinePathErrors(this);
  }

  /**
   * inspect helper for debugging purposes
   * @api private
   */
  inspect() {
    return Object.assign(new Error(this.message), this);
  }

  /**
   * Add an error message for a specific path
   * @param {String} path - The path where the error occurred
   * @param {String|Error} error - The error message or Error instance
   * @api private
   */
  addError(path, error) {
    // If the error is another ValidationError, recursively add its errors
    if (error instanceof ValidationError) {
      const { errors } = error;
      for (const errorPath of Object.keys(errors)) {
        this.addError(`${path}.${errorPath}`, errors[errorPath]);
      }
      return;
    }

    // Add the error to the errors object
    this.errors[path] = error;
    // Update the main error message to include the new path errors
    this.message = this._message + ': ' + combinePathErrors(this);
  }
}

// Avoid Node deprecation warning DEP0079 by setting custom inspect
if (util.inspect.custom) {
  ValidationError.prototype[util.inspect.custom] = ValidationError.prototype.inspect;
}

/**
 * Helper for JSON.stringify
 * Ensure `name` and `message` show up in toJSON output (re: gh-9847)
 * @api private
 */
Object.defineProperty(ValidationError.prototype, 'toJSON', {
  enumerable: false,
  writable: false,
  configurable: true,
  value: function() {
    return Object.assign({}, this, { name: this.name, message: this.message });
  }
});

// Define the name property as 'ValidationError' on the prototype
Object.defineProperty(ValidationError.prototype, 'name', {
  value: 'ValidationError'
});

/*!
 * Module exports
 */
module.exports = ValidationError;
